---
const { sort } = Astro.props;
---

<j-chrono data-sort={sort}></j-chrono>

<script>

import { toJDate } from "pfunc";
import { getColorFromCollectionName } from "pfunc";
import { getCollection } from 'astro:content';


let essays   = await getCollection('essays');
let projects = await getCollection('projects');
let previous = await getCollection('previous');
let started  = await getCollection('started');

  class JChrono extends HTMLElement {

    public renderDates(value:JChrono.DayObj) {

      let alt = value.alt;
      let day = value.day;
      let title = value.title;
      let desc = value.desc;
      let img = value.img;
      let location = value.location;
      let map = value.map;
      let color = value.color;

      let mDate = toJDate(day);

      let jdate = `
        <a id="${alt}" style="color:${color}" href="">
          <h8 title="${title}">üìÖ&nbsp;${mDate}</h8>
        </a>
        <h5>${title}</h5>`;

      let lm:string = "";
      if (location) {
        lm = `<p style="font-style: italic;">${location}<a href="${map}" target="_blank">üìç</a></p><br/>`;
      }

      let im:string = "";
      if (img != null) {
        console.log("img: " + img)
        jdate = jdate + `<table>
            <tr>
                <td>
                    <a href="${img}" target="_blank"><img src="${img}" style="padding-right:20px;" pl="20" width="100px"></img></a>
                </td>
                <td>
                  <p style="width: 600px;">${desc}</p>
                  ${lm}
                </td>
            </tr>
        </table><br/>`;
      } else {
        jdate = jdate + `<p>${desc}</p>` + lm;
      }
      const idiv = document.createElement('div') as HTMLDivElement;
      idiv.innerHTML = jdate;
      return idiv;
    }

    public renderPostByArticle(post:any, div:HTMLDivElement) {

        let title = post.data.title;

        let b = document.createElement('br') as HTMLBRElement;
        let h2 = document.createElement('h2') as HTMLHeadElement;
        let ol = document.createElement('ol') as HTMLOListElement;

        h2.textContent = title;
        console.log("title: " + title);
        div.appendChild(h2);
        div.appendChild(b);

        let dates:Record<string, Object> = post.data.dates as Record<string, Object>;

        for (const key in dates) {

            const value:JChrono.DayObj = dates[key] as JChrono.DayObj;

            console.log(key + ': ' + JSON.stringify(value));

            let idiv = this.renderDates(value);

            ol.appendChild(idiv);
        }

        div.appendChild(ol);
    }

    constructor() {
      super();

      let sort = this.dataset.sort;

      console.log("sort: " + sort);

      const div = document.createElement('div') as HTMLDivElement;

      switch (sort) {
        case 'essays':
          essays.map(async post => {
            this.renderPostByArticle(post, div);
          });
          break;
        case 'projects':
          projects.map(async post => {
            this.renderPostByArticle(post, div);
          });
          break;
        case 'previous':
          previous.map(async post => {
            this.renderPostByArticle(post, div);
          });
          break;
        case 'started':
          started.map(async post => {
            this.renderPostByArticle(post, div);
          });
        case 'all':
          let posts = [...essays, ...projects, ...previous, ...started];
          var allDates:JChrono.DayObj[] = [];
          posts.map(async post => {
            let color =  getColorFromCollectionName(post.collection);
            let dates:Record<string, Object> = post.data.dates as Record<string, Object>;
            for (const key in dates) {
              const date:JChrono.DayObj = dates[key] as JChrono.DayObj;
              date.color = color;
              allDates.push(date);
            }
          });
          allDates = allDates.sort((a, b) => {
            if (new Date(a.day) < new Date(b.day))
              return 1;
            if (new Date(a.day) > new Date(b.day))
              return -1;
            return 0;
          });

          let adiv = document.createElement('div') as HTMLDivElement;

          allDates.map(async date => {
            let idiv = this.renderDates(date);
            adiv.appendChild(idiv);
          });
          div.appendChild(adiv);
          break;
      }
      this.appendChild(div);
    }
  }
namespace JChrono {
    export interface DayObj {
      alt : string;
      day : Date;
      title: string;
      desc: string;
      img: string;
      location: string;
      map: string;
      color:string;
    }
}

  customElements.define('j-chrono', JChrono);
</script>
