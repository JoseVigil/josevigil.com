---
const { sort } = Astro.props;
---

<j-quotes data-sort={sort}></j-quotes>

<script>

import { toJDate } from "pfunc";
import { type QuoteObj } from "pfunc";
import { type CollObj } from "pfunc";
import { type ArticleObj } from "pfunc";
import { getColorFromCollectionName } from "pfunc";
import { capitalizeFirstLetter } from "pfunc";
import { getCollection } from 'astro:content';


let essays   = await getCollection('essays');
let projects = await getCollection('projects');
let previous = await getCollection('previous');
let started  = await getCollection('started');

  class JQuotes extends HTMLElement {

    public renderquotes(value:QuoteObj) {

      let title = value.title;
      let quote = value.quote;
      let url = value.url;
      let color = value.color;
      let article = value.article;

      let coll = capitalizeFirstLetter(article.collection);

      let jquote = `
        <p><b><a style="color:${color}" href="/essays" target="_blank">${coll}</a></b>&nbsp;|&nbsp;<b><a style="color:${color}" id="${url}" target="_blank" href="/${article.collection + "/" + article.slug }">${article.title}</a></b>
        <a style="color:gray;" href="${url}" target="_blank"><p style="font-size: 30px;  text-align: left; title="${title}">${title}</p></a>
        <i><p style="width: 800px; font-size: 27px; text-align: left;">${quote}&nbsp;&nbsp;<font style="font-size: 10px; color:gray;">Jose Vigil</font></p></i><br/><br/>`;

      const idiv = document.createElement('div') as HTMLDivElement;
      idiv.innerHTML = jquote;
      return idiv;
    }

    public renderPostByArticle(post:any, div:HTMLDivElement) {

        let title = post.data.title;

        let b = document.createElement('br') as HTMLBRElement;
        let h2 = document.createElement('h2') as HTMLHeadElement;
        let ol = document.createElement('ol') as HTMLOListElement;

        h2.textContent = title;
        div.appendChild(h2);
        div.appendChild(b);

        let quotes:Record<string, Object> = post.data.quotes as Record<string, Object>;

        for (const key in quotes) {

            const value:CollObj = quotes[key] as CollObj;

            //console.log(key + ': ' + JSON.stringify(value));

            let data:QuoteObj = value.date as QuoteObj;

            let idiv = this.renderquotes(data);

            ol.appendChild(idiv);
        }

        div.appendChild(ol);
    }

    constructor() {
      super();

      let sort = this.dataset.sort;

      //console.log("sort: " + sort);

      const div = document.createElement('div') as HTMLDivElement;

      switch (sort) {
        case 'essays':
          essays.map(async post => {
            this.renderPostByArticle(post, div);
          });
          break;
        case 'projects':
          projects.map(async post => {
            this.renderPostByArticle(post, div);
          });
          break;
        case 'previous':
          previous.map(async post => {
            this.renderPostByArticle(post, div);
          });
          break;
        case 'started':
          started.map(async post => {
            this.renderPostByArticle(post, div);
          });
        case 'all':
          let posts = [...essays, ...projects, ...previous, ...started];
          var allquotes:QuoteObj[] = [];
          posts.map(async post => {

            let color =  getColorFromCollectionName(post.collection);

            let article:ArticleObj = {
              slug : post.slug,
              collection: post.collection,
              title: post.data.title
            };

            let quotes:Record<string, Object> = post.data.quotes as Record<string, Object>;

            for (const key in quotes) {
              //console.log("quotes: " + JSON.stringify(quotes));
              //console.log("---------------")
              const quote:QuoteObj = quotes[key] as QuoteObj;
              quote.color = color;
              quote.article = article;
              allquotes.push(quote);
            }
          });
          let adiv = document.createElement('div') as HTMLDivElement;

          allquotes.map(async date => {
            let idiv = this.renderquotes(date);
            adiv.appendChild(idiv);
          });
          div.appendChild(adiv);
          break;
      }
      this.appendChild(div);
    }
  }
customElements.define('j-quotes', JQuotes);
</script>
